const { GOOGLE_IMG_SCRAP , GOOGLE_QUERY } = require('google-img-scrap');
const { LocalStorage } = require("node-localstorage");
const path = require('path');

//database
const db = new LocalStorage(path.resolve(__dirname, "../db"));

//default domains
const domains = {
    real: ['xvideos.com', 'xnxx.com', 'xhamster.com', 'heavy-r.com', "pornhub.com"],
    hentai: ["hentai-img.com", "xxxhentaigallery.com"]
}

//porny
const porny = {
    get: async function(options = {}){
        //configuration
        const configuration = {};

        //randomize search
        if(!options.search || options.search.trim() == "") 
            configuration.search = "all";
        else configuration.search = options.search;

        //setup limit
        if(options.limit && typeof options.limit == "number")
            configuration.limit = options.limit;

        //setup extention
        if(options.extension) {
            let valide = false;
            const extensions = Object.keys(GOOGLE_QUERY.EXTENSION);

            for(const type of extensions) {
                if(type.toLowerCase().includes(options.extension.toLowerCase())) 
                    valide = GOOGLE_QUERY.EXTENSION[type];
            }

            if(!valide) throw `Invalide file extension : "${options.extension}" valide extensions are : ${extensions.join(',')}`

            configuration.extension = {
                EXTENSION: valide
            }
        } else configuration.extension = {};

        //database
        if(!options.noDatabase) {
            const resultNotParsed = db.getItem(configuration.search + "-" + (options.type ? options.type : "all"));

            if(resultNotParsed) {
                const result = JSON.parse(resultNotParsed);
                const limit = configuration.limit;

                const limited = limit ? result.slice(0, limit) : result;

                return configuration.extension.EXTENSION ? 
                    limited.filter(e => e.url.includes(options.extension)) 
                    : limited;
            }
        }

        //setup type
        if(!options.type || options.type == "all")
            configuration.domains = domains.real.concat(domains.hentai);
        else if(options.type == "hentai")
            configuration.domains = domains.hentai;
        else
            configuration.domains = domains.real;

        //setup new domain
        if(options.domains) configuration.domains = options.domains;

        //add domain
        if(options.addDomains) configuration.domains = configuration.domains.concat(options.addDomains);

        //scrapping
        const scrap = await GOOGLE_IMG_SCRAP({

            search: configuration.search,
            domains: configuration.domains,

            query: configuration.extension,

            execute: function(element){
                if(!element.url.match('gstatic.com')) return element;
            }

        });

        //register in database
        db.setItem(configuration.search + "-" + (options.type ? options.type : "all"), JSON.stringify(scrap.result));

        return configuration.limit ? scrap.result.slice(0, configuration.limit) : scrap.result;
    }
}

module.exports = porny;